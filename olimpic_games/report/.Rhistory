reticulate::repl_python()
from zipfile import ZipFile
import pandas as pd
from zipfile import ZipFile
file = "C:/Users/Viktor/BI_Stat_2022/olimpic_games/data/athlete_events.zip"
# opening the zip file in READ mode
with ZipFile(file, 'r') as zip:
zip.printdir()
def merger(zipfile, file_type, save_type="csv", path_output="Default", name_output="Default"):
"""
This function merging into one data frame several files that are compressed into one zip file.
:param zipfile: path to zip file with table datas
:param file_type: file type of table datas. Accepting csv or excel.
:param save_type: file type for merged table. Default is csv.
:param path_output: path for saving merged table.
Default save in folder where is zipfile.
:param name_output: name for saved merged table.
Default saving as zipfile name.
:return file: saved merged table.
"""
# for opening multiple file types
ft_read = dict(csv=pd.read_csv, excel=pd.read_excel)
ft_write = dict(csv="to_csv", excel="to_excel")
pd_file_type = ft_read[file_type]
ft_write_type = ft_write[save_type]
# if path_output is Default, then saving in folder with zipfile
if path_output == "Default":
path_output = zipfile.split(sep="/")
path_output = '/'.join(map(str, path_output[:-1]))
# if name_output is Default, then saving as name of zipfile
if name_output == "Default":
path_file = zipfile.split(sep="/")
name_output = path_file[-1].split(sep=".")[0]
# merging into one data frame several files that are compressed into one zip file
df = pd.concat(
[pd_file_type(ZipFile(zipfile).open(i)) for i in ZipFile(zipfile).namelist()],
ignore_index=True
)
getattr(df, ft_write_type)(path_output + "/" + name_output + "." + save_type)
df = pd.read_csv("C:/Users/Viktor/BI_Stat_2022/olimpic_games/data/athlete_events.csv")
df.shape
df.dtypes
df.drop("Unnamed: 0", axis=1, inplace = True)
df.dtypes
df.isna().sum()
df = df.dropna(axis = 0, subset=["Name"])
df.isna().sum()
all_columns = ['ID', 'Name', 'Sex', 'Age', 'Height', 'Weight', 'Team', 'NOC', 'Games', 'Year', 'Season', 'City', 'Sport', 'Event', 'Medal']
df_dupl = df[df.duplicated(subset=all_columns, keep= False)]
df_dupl.shape
print("Before dropping",df.shape)
df.drop_duplicates(subset=all_columns, keep='first', inplace=True)
print("After dropping",df.shape)
df_dupl = df[df.duplicated(subset=all_columns, keep= False)]
df_dupl.shape
df_1992 = df.query("Year == 1992")
df_1992_M = df_1992.query('Sex == "M"')
df_1992_F = df_1992.query('Sex == "F"')
print("The age of the youngest male athlete is",df_1992_M.Age.min())
print("The age of the youngest female athlete is",df_1992_F.Age.min())
df_M = df.query('Sex == "M"')
df_F = df.query('Sex == "F"')
mean_Height_M = round(df_M.Height.mean(skipna=True), 2)
mean_Height_F = round(df_F.Height.mean(skipna=True), 2)
SD_Height_M = round(df_M.Height.std(skipna=True), 2)
SD_Height_F = round(df_F.Height.std(skipna=True), 2)
table_t4 = pd.DataFrame([('Male', mean_Height_M, SD_Height_M),
('Female', mean_Height_F, SD_Height_F)],
columns=('Value', 'Mean', 'SD'))
print("Statistic about Height for both sex:", '\n', table_t4)
df_2000.query('Sex == "F"','Year == "2000"')
df_2000 = df.query('Sex == "F"','Year == "2000"')
df_2000 = df.query('Sex == "F" and Year == "2000"')
df_2000
df_2000 = df.query('Sex == "F" and Year == 2000')
df_2000
View(df_2000)
df = df[df.duplicated(subset=all_columns, keep= False)]
df.shape
View(df_2000)
df_F_Tenn_2000 = df.query('Sex == "F" and Sport == "Tennis" and Year == 2000')
df_F_Tenn_2000
df_F_Tenn_2000 = df.query('Sex == "F" and Sport == Tennis and Year == 2000')
df_F_Tenn_2000
df_F_Tenn_2000 = df.query('Sex == F and Sport == Tennis and Year == 2000')
df_F_Tenn_2000
df_F_Tenn_2000 = df.query('Sex == "F" and Sport == "Tennis" and Year == 2000')
df_F_Tenn_2000 = df.query('Sex == "F" and Sport == "Tennis" and Year == 2000')
df_F_Tenn_2000
View(df_2000)
df_F_Tenn_2000 = df.query('Sex == "F" and Sport == "Tennis"')
df_F_Tenn_2000
df_F_Tenn_2000 = df.query('Sex == "F" and Sport == "Tennis " and Year == 2000')
df_F_Tenn_2000 = df.query('Sex == "F" and Sport == "Tennis " and Year == 2000')
df_F_Tenn_2000
df_F_Tenn_2000 = df.query('Sex == "F" and Sport == " Tennis" and Year == 2000')
df_F_Tenn_2000
df_F_Tenn_2000 = df.query('Sex == "F" and Sport == "Tennis" and Year == 2000')
df_F_Tenn_2000
df_F_Tenn_2000 = df.query('Sex == "F" and Sport == "Tennis" and Year == 2000')
df_F_Tenn_2000
df_F_Tenn_2000 = df.query('Sex == "F" and Year == 2000')
df_F_Tenn_2000
df_F_Tenn_2000 = df.query('Sex == "F" and Year == 2000')
df_F_Tenn_2000
df
from zipfile import ZipFile
import pandas as pd
from zipfile import ZipFile
file = "C:/Users/Viktor/BI_Stat_2022/olimpic_games/data/athlete_events.zip"
# opening the zip file in READ mode
with ZipFile(file, 'r') as zip:
zip.printdir()
def merger(zipfile, file_type, save_type="csv", path_output="Default", name_output="Default"):
"""
This function merging into one data frame several files that are compressed into one zip file.
:param zipfile: path to zip file with table datas
:param file_type: file type of table datas. Accepting csv or excel.
:param save_type: file type for merged table. Default is csv.
:param path_output: path for saving merged table.
Default save in folder where is zipfile.
:param name_output: name for saved merged table.
Default saving as zipfile name.
:return file: saved merged table.
"""
# for opening multiple file types
ft_read = dict(csv=pd.read_csv, excel=pd.read_excel)
ft_write = dict(csv="to_csv", excel="to_excel")
pd_file_type = ft_read[file_type]
ft_write_type = ft_write[save_type]
# if path_output is Default, then saving in folder with zipfile
if path_output == "Default":
path_output = zipfile.split(sep="/")
path_output = '/'.join(map(str, path_output[:-1]))
# if name_output is Default, then saving as name of zipfile
if name_output == "Default":
path_file = zipfile.split(sep="/")
name_output = path_file[-1].split(sep=".")[0]
# merging into one data frame several files that are compressed into one zip file
df = pd.concat(
[pd_file_type(ZipFile(zipfile).open(i)) for i in ZipFile(zipfile).namelist()],
ignore_index=True
)
getattr(df, ft_write_type)(path_output + "/" + name_output + "." + save_type)
df = pd.read_csv("C:/Users/Viktor/BI_Stat_2022/olimpic_games/data/athlete_events.csv")
df.shape
df.dtypes
df.drop("Unnamed: 0", axis=1, inplace = True)
df.dtypes
df.isna().sum()
df = df.dropna(axis = 0, subset=["Name"])
df.isna().sum()
all_columns = ['ID', 'Name', 'Sex', 'Age', 'Height', 'Weight', 'Team', 'NOC', 'Games', 'Year', 'Season', 'City', 'Sport', 'Event', 'Medal']
df_dupl = df[df.duplicated(subset=all_columns, keep= False)]
df_dupl.shape
print("Before dropping",df.shape)
df.drop_duplicates(subset=all_columns, keep='first', inplace=True)
print("After dropping",df.shape)
df_dupl = df[df.duplicated(subset=all_columns, keep= False)]
df_dupl.shape
df_1992 = df.query("Year == 1992")
df_1992_M = df_1992.query('Sex == "M"')
df_1992_F = df_1992.query('Sex == "F"')
print("The age of the youngest male athlete is",df_1992_M.Age.min())
print("The age of the youngest female athlete is",df_1992_F.Age.min())
df_M = df.query('Sex == "M"')
df_F = df.query('Sex == "F"')
mean_Height_M = round(df_M.Height.mean(skipna=True), 2)
mean_Height_F = round(df_F.Height.mean(skipna=True), 2)
SD_Height_M = round(df_M.Height.std(skipna=True), 2)
SD_Height_F = round(df_F.Height.std(skipna=True), 2)
table_t4 = pd.DataFrame([('Male', mean_Height_M, SD_Height_M),
('Female', mean_Height_F, SD_Height_F)],
columns=('Value', 'Mean', 'SD'))
print("Statistic about Height for both sex:", '\n', table_t4)
df_F_Tenn_2000 = df.query('Sex == "F" and Sport == "Tennis" and Year == 2000')
df_F_Tenn_2000
Mean_Height_F_Tenn_2000 = round(df_F_Tenn_2000.mean(skipna=True), 1)
print(Mean_Height_F_Tenn_2000)
df_F_Tenn_2000 = df.query('Sex == "F" and Sport == "Tennis" and Year == 2000')
Mean_Height_F_Tenn_2000 = round(df_F_Tenn_2000.mean(skipna=True), 1)
print(Mean_Height_F_Tenn_2000)
df_F_Tenn_2000 = df.query('Sex == "F" and Sport == "Tennis" and Year == 2000')
Mean_Height_F_Tenn_2000 = round(df_F_Tenn_2000.Height.mean(skipna=True), 1)
print(Mean_Height_F_Tenn_2000)
print(Mean_Height_F_Tenn_2000,'±',SD_Height_F_Tenn_2000)
kipna=True), 1)
print(Mean_Height_F_Tenn_2000,'±',SD_Height_F_Tenn_2000)
df_F_Tenn_2000 = df.query('Sex == "F" and Sport == "Tennis" and Year == 2000')
Mean_Height_F_Tenn_2000 = round(df_F_Tenn_2000.Height.mean(skipna=True), 1)
SD_Height_F_Tenn_2000 = round(df_F_Tenn_2000.Height.std(skipna=True), 1)
print(Mean_Height_F_Tenn_2000,'±',SD_Height_F_Tenn_2000)
df_F_Tenn_2000 = df.query('Sex == "F" and Sport == "Tennis" and Year == 2000')
Mean_Height_F_Tenn_2000 = round(df_F_Tenn_2000.Height.mean(skipna=True), 1)
SD_Height_F_Tenn_2000 = round(df_F_Tenn_2000.Height.std(skipna=True), 1)
print('The Height for tennis female player in 2000 is', Mean_Height_F_Tenn_2000,'±',SD_Height_F_Tenn_2000)
df_F_Tenn_2000 = df.query('Sex == "F" and Sport == "Tennis" and Year == 2000')
Mean_Height_F_Tenn_2000 = round(df_F_Tenn_2000.Height.mean(skipna=True), 1)
SD_Height_F_Tenn_2000 = round(df_F_Tenn_2000.Height.std(skipna=True), 1)
print('The Height for tennis female player in 2000 is', Mean_Height_F_Tenn_2000,'±',SD_Height_F_Tenn_2000,'centimeters')
from zipfile import ZipFile
import pandas as pd
from zipfile import ZipFile
file = "C:/Users/Viktor/BI_Stat_2022/olimpic_games/data/athlete_events.zip"
# opening the zip file in READ mode
with ZipFile(file, 'r') as zip:
zip.printdir()
def merger(zipfile, file_type, save_type="csv", path_output="Default", name_output="Default"):
"""
This function merging into one data frame several files that are compressed into one zip file.
:param zipfile: path to zip file with table datas
:param file_type: file type of table datas. Accepting csv or excel.
:param save_type: file type for merged table. Default is csv.
:param path_output: path for saving merged table.
Default save in folder where is zipfile.
:param name_output: name for saved merged table.
Default saving as zipfile name.
:return file: saved merged table.
"""
# for opening multiple file types
ft_read = dict(csv=pd.read_csv, excel=pd.read_excel)
ft_write = dict(csv="to_csv", excel="to_excel")
pd_file_type = ft_read[file_type]
ft_write_type = ft_write[save_type]
# if path_output is Default, then saving in folder with zipfile
if path_output == "Default":
path_output = zipfile.split(sep="/")
path_output = '/'.join(map(str, path_output[:-1]))
# if name_output is Default, then saving as name of zipfile
if name_output == "Default":
path_file = zipfile.split(sep="/")
name_output = path_file[-1].split(sep=".")[0]
# merging into one data frame several files that are compressed into one zip file
df = pd.concat(
[pd_file_type(ZipFile(zipfile).open(i)) for i in ZipFile(zipfile).namelist()],
ignore_index=True
)
getattr(df, ft_write_type)(path_output + "/" + name_output + "." + save_type)
df = pd.read_csv("C:/Users/Viktor/BI_Stat_2022/olimpic_games/data/athlete_events.csv")
df.shape
df.dtypes
df.drop("Unnamed: 0", axis=1, inplace = True)
df.dtypes
df.isna().sum()
df = df.dropna(axis = 0, subset=["Name"])
df.isna().sum()
all_columns = ['ID', 'Name', 'Sex', 'Age', 'Height', 'Weight', 'Team', 'NOC', 'Games', 'Year', 'Season', 'City', 'Sport', 'Event', 'Medal']
df_dupl = df[df.duplicated(subset=all_columns, keep= False)]
df_dupl.shape
print("Before dropping",df.shape)
df.drop_duplicates(subset=all_columns, keep='first', inplace=True)
print("After dropping",df.shape)
df_dupl = df[df.duplicated(subset=all_columns, keep= False)]
df_dupl.shape
df_1992 = df.query("Year == 1992")
df_1992_M = df_1992.query('Sex == "M"')
df_1992_F = df_1992.query('Sex == "F"')
print("The age of the youngest male athlete is",df_1992_M.Age.min())
print("The age of the youngest female athlete is",df_1992_F.Age.min())
df_M = df.query('Sex == "M"')
df_F = df.query('Sex == "F"')
mean_Height_M = round(df_M.Height.mean(skipna=True), 2)
mean_Height_F = round(df_F.Height.mean(skipna=True), 2)
SD_Height_M = round(df_M.Height.std(skipna=True), 2)
SD_Height_F = round(df_F.Height.std(skipna=True), 2)
table_t4 = pd.DataFrame([('Male', mean_Height_M, SD_Height_M),
('Female', mean_Height_F, SD_Height_F)],
columns=('Value', 'Mean', 'SD'))
print("Statistic about Height for both sex:", '\n', table_t4)
df_F_Tenn_2000 = df.query('Sex == "F" and Sport == "Tennis" and Year == 2000')
Mean_Height_F_Tenn_2000 = round(df_F_Tenn_2000.Height.mean(skipna=True), 1)
SD_Height_F_Tenn_2000 = round(df_F_Tenn_2000.Height.std(skipna=True), 1)
print('The Height for tennis female player in 2000 is', '(',dMean_Height_F_Tenn_2000,'±',SD_Height_F_Tenn_2000,')','centimeters')
df_F_Tenn_2000 = df.query('Sex == "F" and Sport == "Tennis" and Year == 2000')
Mean_Height_F_Tenn_2000 = round(df_F_Tenn_2000.Height.mean(skipna=True), 1)
SD_Height_F_Tenn_2000 = round(df_F_Tenn_2000.Height.std(skipna=True), 1)
print('The Height for tennis female player in 2000 is', '(',dMean_Height_F_Tenn_2000,'±',SD_Height_F_Tenn_2000,')','centimeters')
df_F_Tenn_2000 = df.query('Sex == "F" and Sport == "Tennis" and Year == 2000')
Mean_Height_F_Tenn_2000 = round(df_F_Tenn_2000.Height.mean(skipna=True), 1)
SD_Height_F_Tenn_2000 = round(df_F_Tenn_2000.Height.std(skipna=True), 1)
print('The Height for tennis female player in 2000 is', '(',Mean_Height_F_Tenn_2000,'±',SD_Height_F_Tenn_2000,')','centimeters')
df.query('Year == 2006 and Weight == df.Weight.max())
df.query('Year == 2006 and Weight == df.Weight.max()')
df.query('Year == 2006 and Weight == Weight.max()')
df.Weight.max()
df.Weight.max
df.Weight.max()
df.query('Year == 2006 and Weight == df.Weight.max()')
df_2006 = df.query('Year == 2006')
Weight_max_2006 = df_2006.Weight.max()
df.query('Weight == Weight_max_2006')
df_2006 = df.query('Year == 2006')
Weight_max_2006 = df_2006.Weight.max()
df.query('Weight == Weight_max_2006')
Weight_max_2006 = df_2006.Weight.max()
Weight_max_2006 = df_2006.Weight.max()
Weight_max_2006
print(df[df['Weight'] == Weight_max_2006])
print(df_2006[df_2006['Weight'] == Weight_max_2006])
print(df_2006[df_2006['Weight'] == df_2006.Weight.max()])
thlete_2006
heaviest_athlete_2006 = df_2006[df_2006['Weight'] == df_2006.Weight.max()])
heaviest_athlete_2006
df_2006 = df.query('Year == 2006')
heaviest_athlete_2006 = df_2006[df_2006['Weight'] == df_2006.Weight.max()])
df_2006 = df.query('Year == 2006')
heaviest_athlete_2006 = df_2006[df_2006['Weight'] == df_2006.Weight.max()]
heaviest_athlete_2006
heaviest_athlete_2006.Sport
heaviest_athlete_2006['Sport']
print(heaviest_athlete_2006['Sport'])
df_2006 = df.query('Year == 2006')
heaviest_athlete_2006 = df_2006[df_2006['Weight'] == df_2006.Weight.max()]
print(heaviest_athlete_2006['Sport'])
